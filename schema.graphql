type BackerRewardPercentageUpdateScheduled @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  rewardPercentage_: BigInt! # uint256
  cooldown_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderActivated @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  rewardReceiver_: Bytes! # address
  rewardPercentage_: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderMigrated @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  migrator_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderRewardReceiverReplacementApproved @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  newRewardReceiver_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderRewardReceiverReplacementCancelled @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  newRewardReceiver_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderRewardReceiverReplacementRequested @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  newRewardReceiver_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommunityApproved @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Dewhitelisted @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GaugeCreated @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  gauge_: Bytes! # address
  creator_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type KYCApproved @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type KYCRevoked @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewAllocation @entity(immutable: true) {
  id: Bytes!
  backer_: Bytes! # address
  gauge_: Bytes! # address
  allocation_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewCycleDurationScheduled @entity(immutable: true) {
  id: Bytes!
  newCycleDuration_: BigInt! # uint256
  cooldownEndTime_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewDistributionDuration @entity(immutable: true) {
  id: Bytes!
  newDistributionDuration_: BigInt! # uint256
  by_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NotifyReward @entity(immutable: true) {
  id: Bytes!
  rewardToken_: Bytes! # address
  sender_: Bytes! # address
  amount_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  reason_: Bytes! # bytes20
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Permitted @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  rewardPercentage_: BigInt! # uint256
  cooldown_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Revoked @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardDistributed @entity(immutable: true) {
  id: Bytes!
  sender_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardDistributionFinished @entity(immutable: true) {
  id: Bytes!
  sender_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardDistributionStarted @entity(immutable: true) {
  id: Bytes!
  sender_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  builder_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type BackerRewardsClaimed @entity(immutable: true) {
  id: Bytes!
  rewardToken_: Bytes! # address
  backer_: Bytes! # address
  amount_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuilderRewardsClaimed @entity(immutable: true) {
  id: Bytes!
  rewardToken_: Bytes! # address
  builder_: Bytes! # address
  amount_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GaugeRootstockCollectiveInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GaugeRootstockCollectiveNewAllocation @entity(immutable: true) {
  id: Bytes!
  backer_: Bytes! # address
  allocation_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GaugeRootstockCollectiveNotifyReward @entity(immutable: true) {
  id: Bytes!
  gaugeAddress: Bytes! # address
  rewardToken_: Bytes! # address
  builderAmount_: BigInt! # uint256
  backersAmount_: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
